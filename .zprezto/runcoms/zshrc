#
# Executes commands at the start of an interactive session.  Authors: Sorin Ionescu <sorin.ionescu@gmail.com>
# 
# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
    source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...
if [[ -f /usr/share/doc/pkgfile/command-not-found.zsh ]]; then
    source /usr/share/doc/pkgfile/command-not-found.zsh
fi

alias _="sudo"
alias sudo="sudo "

alias ls="ls -F --color=auto"

alias l="ls -lah"
alias ranger="ranger-cd"

alias gai="git add --interactive"
alias gbc="gbfm -c"
alias gbC="gbfm -C"
alias gbh="git switch -c"
alias gbu="git branch --set-upstream-to"
alias gbv="git branch -vv"
alias gca="git commit --amend"
alias gco="git checkout --patch"
alias gC="git checkout"
alias gD="git diff"
alias gDs="gD --cached"
alias gf="gfa --prune"
unalias gfc
alias gln="gl -n"
alias gpd="gp --delete"
alias gRv="gR -v"
alias gs="git status"
alias gss="git stash save -p"
alias gsS="git stash save --include-untracked"
alias gS="git show"

export VISUAL=nvim
export EDITOR=nvim

function req_ssh_agent {
    if [[ -z $SSH_AGENT_PID ]]; then
        eval $(ssh-agent)
    fi

    if [[ $(ssh-add -l) = "The agent has no identities." ]]; then
        ssh-add
    fi

    $@
}

function ga {
    if [[ -z $1 ]]; then
        git add -p
    else
        git add $@
    fi
}

function gbfm {
    if [[ ! -z $3 ]]; then
        start=$3
    elif [[ $(git rev-parse --abbrev-ref HEAD) == "HEAD" ]]; then
        start=HEAD
    elif git remote get-url upstream >/dev/null 2>&1; then
        start=upstream
    elif git remote get-url origin >/dev/null 2>&1; then
        start=origin
    else
        echo "Unknown start point"
        return 1
    fi

    git switch --no-track $1 $2 $start
}

function gfc {
    git clone $@ || return 1
    cd ./*(/om[1]) || return 1
    default_branch=$(git branch --show-current)
    git checkout origin || return 1
    git branch --delete $default_branch || return 1
}

function gps {
    branch=$(git rev-parse --abbrev-ref HEAD) || return 1

    if git remote get-url fork >/dev/null 2>&1; then
        remote=fork
    elif git remote get-url origin >/dev/null 2>&1; then
        remote=origin
    elif [[ -z $1 ]]; then
        remote=$1
    else
        echo "No remote specified"
        return 1
    fi

    if [[ $branch != "HEAD" ]]; then
        git push --set-upstream $remote $branch
    else
        echo "Not on a branch"
        return 1
    fi
}

function gt {
    git --no-pager diff --binary --no-color | grep -i '^\+.*todo'
}

function gts {
    git --no-pager diff --binary --no-color --cached | grep -i '^\+.*todo'
}

function gtu {
    git --no-pager diff --binary --no-color ${1:-origin/master}...${2:-HEAD} | grep -i '^\+.*todo'
}

function require_vcsh_repository {
    if [[ -z $1 ]]; then
        echo "vcsh requires a repository"
        return 1
    fi
}

function va {
    require_vcsh_repository $@ || return 1

    GIT_DIR=$(vcsh $1 rev-parse --git-dir) ga ${@:2}
}


function vc {
    require_vcsh_repository $@ || return 1

    GIT_DIR=$(vcsh $1 rev-parse --git-dir) gc ${@:2}
}

function vC {
    require_vcsh_repository $@ || return 1

    GIT_DIR=$(vcsh $1 rev-parse --git-dir) gC ${@:2}
}

function vD {
    require_vcsh_repository $@ || return 1

    GIT_DIR=$(vcsh $1 rev-parse --git-dir) gD ${@:2}
}

function vDs {
    require_vcsh_repository $@ || return 1

    GIT_DIR=$(vcsh $1 rev-parse --git-dir) gDs ${@:2}
}

function vm {
    require_vcsh_repository $@ || return 1

    GIT_DIR=$(vcsh $1 rev-parse --git-dir) gm ${@:2}
}

function vs {
    if [[ -z $1 ]]; then
        vcsh status
    else
        vcsh $1 status ${@:2}
    fi
}

function vss {
    require_vcsh_repository $@ || return 1

    GIT_DIR=$(vcsh $1 rev-parse --git-dir) gss ${@:2}
}

function vS {
    require_vcsh_repository $@ || return 1

    GIT_DIR=$(vcsh $1 rev-parse --git-dir) gS ${@:2}
}

function vp {
    if [[ -z $1 ]]; then
        req_ssh_agent vcsh push
    else
        vcsh $1 push ${@:2}
    fi
}

function vpf {
    require_vcsh_repository $@ || return 1

    GIT_DIR=$(vcsh $1 rev-parse --git-dir) gpf ${@:2}
}

function vf {
    if [[ -z $1 ]]; then
        vcsh foreach fetch
    else
        vcsh $1 fetch ${@:2}
    fi
}

function folder-chooser {
    VISUAL=ranger-folder-selector zle edit-command-line
}

function file-chooser {
    VISUAL=ranger-file-selector zle edit-command-line
}

function ranger-cd {
    tempfile=$(mktemp)
    \ranger --choosedir="$tempfile" "${@:-$(pwd)}" < $TTY
    test -f "$tempfile" &&
    if [[ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]]; then
        cd -- "$(cat "$tempfile")"
    fi
    rm -f -- "$tempfile"
}

function carry-ranger {
    \ranger < $TTY
    VISUAL=true zle edit-command-line
}

function carry-ranger-cd {
    ranger-cd
    VISUAL=true zle edit-command-line
}

# peco
function exists { which $1 &> /dev/null }

if exists peco; then
    function peco_select_history() {
        local tac
        exists gtac && tac="gtac" || { exists tac && tac="tac" || { tac="tail -r" } }
        local peco
        [[ -z "$LBUFFER" ]] && peco="peco" || peco='peco --query "$LBUFFER"'
        BUFFER=$(fc -l -n 1 | eval $tac | eval $peco)
        CURSOR=$#BUFFER         # move cursor
        zle -R -c               # refresh
    }

    zle -N peco_select_history
    bindkey '^R' peco_select_history
fi

autoload -z edit-command-line
zle -N edit-command-line

zle -N carry-ranger
zle -N carry-ranger-cd

stty -ixon

bindkey '^E^E' edit-command-line
bindkey '^Er' carry-ranger
bindkey '^Ec' carry-ranger-cd
bindkey -s ',R' 'source ~/.zshrc^M'

bindkey -r '^N'
bindkey -r '^P'
bindkey -r '^S'
